{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modelStore.ts","app/stores/commentStore.ts","app/layout/navbar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","sleep","delay","Promise","resolve","setTimeout","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","uptdate","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivites","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","follwings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyTextArea","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhototMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileActivities","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e74fb4d4.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('unauthorized');\n            break;\n        case 404:\n            history.push('/not-found')\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error)\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    uptdate: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivites: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[];\n  }\n\n  export class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n      Object.assign(this, init);\n    }\n  }\n\n  export class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n      if(activity) {\n        this.id = activity.id;\n        this.title = activity.title;\n        this.category = activity.category;\n        this.description = activity.description;\n        this.date = activity.date;\n        this.venue = activity.venue;\n        this.city = activity.city;\n      }\n    }\n  }","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\"\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false)\n        } catch (error) {\n            console.log(error)\n            this.setLoadingInitial(false)\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if(activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error)\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!)\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity)\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.uptdate(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        } \n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error)\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error)\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = {...this.profile, ...profile as Profile};\n                this.loading = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && \n                        this.profile.username == username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username == store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const follwings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = follwings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivites(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modelStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext)\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    } \n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n            \n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => (\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error))\n    )\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this. hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout}} = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item \n                                as={Link} \n                                to={`/profiles/${user?.username}`} \n                                text='My Profile' icon='user'\n                            />\n                            <Dropdown.Item \n                                onClick={logout} text='Logout' icon='power'\n                            />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }} >\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activites'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')} \n                />\n                <Menu.Item \n                    content='I am going'\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}  \n                />\n                <Menu.Item \n                    content='I am hosting'\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}  \n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)} />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListAttendee({attendees}: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3  \n    }\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                        <Image \n                            size='mini' \n                            circular \n                            src={attendee.image || '/assets/user.png'}\n                            bordered\n                            style={attendee.following ? styles : null} />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n            \n        </List>\n    )\n})","import React, {  } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListAttendee from './ActivityListAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label \n                        attached='top'\n                        color='red'\n                        content='Cancelled'\n                        style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                    />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n    return (\n        <>\n        {groupedActivities.map(([group, activities]) => (\n            <Fragment key={group}>\n                <Header sub color='teal'>\n                    {group}\n                </Header>\n                        {activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity} />\n                        ))}\n            </Fragment>\n        ))}\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite'\nimport React, { useEffect, useState } from 'react'\nimport { Grid, Loader } from 'semantic-ui-react'\nimport LoadingComponent from '../../../app/layout/LoadingComponents'\nimport { PagingParams } from '../../../app/models/pagination'\nimport { useStore } from '../../../app/stores/store'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityList from './ActivityList'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from './ActivityListPlaceholder'\n\nexport default observer(function ActivityDashboard() {\n\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                            hasMore={!loadingNext && !!pagination &&\n                            pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}    \n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error'\n                        render={() => \n                            <Label \n                                style={{marginBottom: 10}} \n                                basic color='red' \n                                content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error: error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error'\n                        render={() => \n                            <ValidationErrors errors={errors.error}\n                            />\n                        }\n                    />\n                    <Button \n                        disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} \n                        positive \n                        content='Register' \n                        type='submit' \n                        fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted >\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n                ) : (\n                        <>\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                Login!\n                            </Button>\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                Register!\n                            </Button>\n                        </>\n                    )}\n            </Container>\n        </Segment>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent ({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid'\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\n\nexport default observer(function ActivityForm() {\n\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n     function handleFormSubmit(activity: ActivityFormValues) {\n         if (!activity.id) {\n             let newActivity = {\n                 ...activity,\n                 id: uuid()\n             };\n             createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n         } else {\n             updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n         }\n     }\n\n    if (loadingInitial) return <LoadingComponent content='Loading avtivity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n                validationSchema={validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput \n                            placeholderText='Date' \n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa' \n                            />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' \n                            positive \n                            type='submit' \n                            content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + Enter for new line'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon\n                        color='red'\n                        content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                    <Button \n                        color={activity.isCancelled ? 'green' : 'red'}\n                        floated='left'\n                        basic\n                        content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                        onClick={cancelActivityToggle}\n                        loading={loading}\n                        />\n                        <Button \n                            as={Link}\n                            disabled={activity.isCancelled} \n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button \n                        loading={loading} \n                        onClick={updateAttendance}\n                        disabled={activity.isCancelled} >Cancel attendance</Button>\n                ) : (\n                    <Button \n                        loading={loading} \n                        onClick={updateAttendance} \n                        color='teal'\n                        disabled={activity.isCancelled} >Join Activity</Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length}{attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                    >\n                                    Host\n                                 </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>} \n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponents';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if(id) loadActivity(id);\n        return () => clearSelectedActivity();   \n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            } \n        </>\n    )\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops -we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activity page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const { commonStore } = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return(\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import { Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { Button } from 'semantic-ui-react';\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false);\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n        >\n            {({isSubmitting, isValid, dirty}) => (\n                <Form className='ui form'>\n                    <MyTextInput \n                        placeholder='Display Name'\n                        name='displayName'\n                    />\n                    <MyTextArea\n                        rows={3}\n                        placeholder='Add your bio'\n                        name='bio' \n                    />\n                    <Button \n                        positive\n                        type='submit'\n                        loading={isSubmitting}\n                        content='Update profile'\n                        floated='right'\n                        disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default observer(function ProfileAbout() {\n    const {profileStore} = useStore();\n    const {isCurrentUser, profile} = profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button \n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode \n                        ? \n                        <ProfileEditForm setEditMode={setEditMode} /> \n                        : \n                        <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\nimport { UserActivity } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\nconst panes = [\n    {menuItem: 'Future Events', pane: {key: 'future'}},\n    {menuItem: 'Past Events', pane: {key: 'past'}},\n    {menuItem: 'Hosting', pane: {key: 'hosting'}}\n];\n\nexport default observer(function ProfileActivites() {\n    const {profileStore} = useStore();\n    const {loadUserActivities, profile, loadingActivities, userActivities} = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab \n                        panes={panes}\n                        menu={{secondary: true, pointing: true}}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image \n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{minHeight: 100, objectFit: 'cover'}}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n    const dzActive = {\n        borderColor: 'green'\n    }\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header, Image } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({profile}: Props) {\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhototMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo)\n    }\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button \n                            floated='right' \n                            basic \n                            content={addPhototMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhototMode)} />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                        {addPhototMode ? (\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                        ) : (\n                            <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button\n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)} \n                                            />\n                                            <Button \n                                                basic \n                                                color='red' \n                                                icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                disabled={photo.isMain}\n                                                name={photo.id}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} =useStore();\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex )}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponents';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' /> \n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                <>\n                    <ProfileHeader profile={profile} />\n                    <ProfileContent profile={profile} />\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './navbar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory()\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}